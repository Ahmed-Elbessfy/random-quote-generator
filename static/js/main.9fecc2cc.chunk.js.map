{"version":3,"sources":["components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","react_default","a","createElement","className","id","quote","author","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","focusBtn","React","createRef","getNewQuote","bind","assertThisInitialized","current","focus","_this2","num","Math","floor","random","axios","get","then","res","setState","data","quotes","tweetPath","concat","tabIndex","ref","onClick","href","target","rel","aria-hidden","components_Quote","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAiBeA,MAdf,SAAeC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,cAAYE,GAAG,QAAOJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAyBJ,EAAMM,OAClEL,EAAAC,EAAAC,cAAA,QAAME,GAAG,UAAT,KAAqBL,EAAMO,2BCqClBC,cAvCb,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMZ,KACDgB,MAAM,CACTV,MAAO,6CACPC,OAAS,uBAEXE,EAAKQ,SAAWC,IAAMC,YACtBV,EAAKW,YAAcX,EAAKW,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,CAAAD,IAPHA,mFAUhBG,KAAKK,SAASM,QAAQC,8CAGX,IAAAC,EAAAb,KACLc,EAAMC,KAAKC,MAAoB,IAAdD,KAAKE,UAC5BC,IAAMC,IAAI,0IACTC,KAAK,SAAAC,GAAG,OAAIR,EAAKS,SAAS,CACzB5B,MAAQ2B,EAAIE,KAAKC,OAAOV,GAAKpB,MAC7BC,OAAS0B,EAAIE,KAAKC,OAAOV,GAAKnB,4CAKhC,IAAM8B,EAAS,yCAAAC,OAA4C1B,KAAKI,MAAMV,MAAvD,eAAAgC,OAA0E1B,KAAKI,MAAMT,QACpG,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,oCACEF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACNJ,EAAAC,EAAAC,cAAA,UAAQE,GAAG,YAAYD,UAAU,MAAMmC,SAAU,EAAGC,IAAK5B,KAAKK,SAAUwB,QAAS7B,KAAKQ,aAAtF,aACAnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAA2BmC,SAAU,EAAGlC,GAAG,cAAcqC,KAAML,EAAWM,OAAO,SAASC,IAAI,uBACzG3C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiByC,cAAY,UAE5C5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAOxC,MAAOM,KAAKI,MAAMV,MAAOC,OAAQK,KAAKI,MAAMT,kBAjC3CwC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.9fecc2cc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Quote(props) {\r\n  return (\r\n    <div className='quote'>\r\n      <blockquote id='text'><i className=\"fas fa-quote-left\"></i>{props.quote}</blockquote>\r\n      <cite id='author'>- {props.author}</cite>\r\n    </div>\r\n  )\r\n}\r\n\r\nQuote.propTypes = {\r\n  quote : PropTypes.string.isRequired,\r\n  author : PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Quote\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Quote from './components/Quote'\nimport axios from 'axios'\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      quote: 'Life begins at the end of your comfortzone',\n      author : 'Neale Donald Walsch',\n    }\n    this.focusBtn = React.createRef();\n    this.getNewQuote = this.getNewQuote.bind(this)\n  }\n  componentDidMount(){\n    this.focusBtn.current.focus();\n  }\n  // Generate new quote function\n  getNewQuote(){\n    const num = Math.floor(Math.random()*102);\n    axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n    .then(res => this.setState({\n      quote : res.data.quotes[num].quote ,\n      author : res.data.quotes[num].author,\n    }))\n  }\n\n  render() {\n    const tweetPath = `https://twitter.com/intent/tweet?text=${this.state.quote}%20%0A--%20${this.state.author}`\n    return (\n      <div className=\"App\">\n      <h1>random quote generator</h1>\n        <div id='quote-box'>\n          <button id='new-quote' className='btn' tabIndex={1} ref={this.focusBtn} onClick={this.getNewQuote}>new quote</button>\n          <a className=\"twitter-share-button btn\" tabIndex={2} id='tweet-quote' href={tweetPath} target='_blank' rel=\"noopener noreferrer\" >\n            <i className=\"fab fa-twitter\" aria-hidden=\"true\"></i>\n          </a>\n          <Quote quote={this.state.quote} author={this.state.author} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}